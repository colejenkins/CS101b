@c
@c Instructions on how to set up a group environment, permissions, 
@c code repository, dealing with local locking issues etc.
@c
@c While some of the discussion may apply to more than one environment,
@c no attempt was made to untangle and split the discussion.
@c

@menu
* Setting Up Git::
* Using Git::
* Submitting Assignments::
@end menu

@node Setting Up Git
@subsection Setting Up Git

The Pintos codebase is rather substantial, and you will be working in teams
to develop some complex features on the project.  In situations like this,
a version control system is absolutely essential so that you can coordinate
your interactions with the codebase, and so you can record checkpoints of
your work as you go.  Additionally, you will submit your work using the
version-control system so that we can retrieve and grade what you have done.

We will be using the Git distributed version control system for
@value{coursenumber}.  You can install Git onto your local machine from the
following website:  http://git-scm.com/.  (It is already installed on the
CMS cluster if you decide to work there.)  There are installers for all
major operating systems.  Once Git is installed, you can follow the
instructions below to get started on Pintos.

@strong{You must also have a CMS cluster account for @value{coursenumber}.}
This is how you will retrieve the source code, and how you will submit your
homework.  Make sure you can log in to the CMS cluster as soon as possible.

@enumerate

@item First you will need to figure out a location to work.  You can work
      on your local computer, on the CMS cluster, or wherever you feel
      comfortable doing so.  (If you decide to change where you do your
      assignments, you will need to complete these setup instructions again.)
      I usually work within a @file{projects} directory on my laptop, but
      perhaps you will want to create a @file{@value{coursenumber}} directory
      for yourself to work in.

@item Once you have figured this out, you will clone the repository
      containing the initial Pintos source code, into whatever location
      you have chosen.  This means that you are making a complete copy
      of the original repository (which Git calls "origin") for yourself.
      You will be able to make whatever changes you want to this
      repository without affecting the original repository that you cloned.
      However, as new versions of Pintos are made available to you, you
      can easily pull these changes from the original repository with a
      single command.

      Run the following command, replacing @var{username} with your CMS
      cluster username.  It will create a local copy of the specified
      repository, in a directory named pintos-repo.

      @command{git clone @var{username}@login.cs.caltech.edu:/cs/courses/cs101os/wi1213/pintos-repo}

      Once you have done this, you can run "@command{git remote -v}" to
      see that this repository is now nicknamed “origin”, as stated earlier.
      (You only have read-only access to this repository, since you don't
      want to accidentally clobber the initial source code.)

@item Configure Git with your user information.  The double-quotes in these
      commands are necessary if you have spaces in the values you specify.

      @command{git config --global user.name "Your Name"}
      @command{git config --global user.email "your@email.tld"}

      You will probably also find it helpful to turn on colorful output:

      @command{git config --global color.ui true}

@item Next you will tell Git where you will submit your work.  (We do this
      now so you don’t have to type a long repository string all the time.)
      When you are finished with each assignment, you will push your local
      repository state to this repository on the CMS cluster.  Note that each student has their own separate submission repository.
Change into your local nanodb-repo directory, and replace username with your CMS cluster username.  Note that username appears twice in the command.
git remote add submission \
    username@login.cs.caltech.edu:/cs/courses/cs122/wi1112/submissions/username
Again, once you do this, you should see the name “submission” when you run the command “git remote -v”.
When you are ready to submit your work, you will do so by pushing your local repository changes to the “submission” repository, with a command like this:
git push submission [options ...]
In the future there will be additional options so that we can identify the assignment you are submitting, but that is the basic form.  You should try it right now to see if it works:
git push submission --all
(The --all is necessary the first time since you are pushing to an empty repository.)
Additionally, you can use this repository on the CMS cluster to back up your local repository anytime you want to be sure you don’t lose your work.  Just push your changes to your submission repository on the CMS cluster using “git push submission”.
Now you should be ready to try out NanoDB!
Git Repository Details
You should be aware that your local repository actually contains two components in one.  First, you will see directories and files like src, build.xml, test, etc.  These are actually not part of the Git repository itself; they are a working copy that you can edit separately.  If you decide you don’t like the changes you have made in your working copy, you can always revert back to the repository version with no problems.
When you are completely satisfied with your changes, then you can commit these changes to your repository.  The repository itself is stored in a subdirectory named .git, which you can see if you type “ls -al”.  (Feel free to look in this directory, but don’t muck with anything in there.)








@node Setting Up CVS
@subsection Setting Up CVS

To set up CVS for use with Pintos on the Leland machines, start by
choosing one group member as the keeper of the CVS repository.
Everyone in the group will be able to use the CVS repository, but the
keeper will actually create the repository, keep its files in his or
her home directory, and maintain permissions for its contents.

The keeper has to perform several steps to set up the repository.
First, create a new AFS group for the repository by executing
@samp{pts creategroup @var{keeper}:pintos-cvs}, where @var{keeper} is
the keeper's Leland username.  Then, add each group member to the new
group by repeatedly using the command @samp{pts adduser -user
@var{username} -group @var{keeper}:pintos-cvs}, where @var{username}
is the name of a group member.  After the group is created and its
members added, @samp{pts membership @var{keeper}:pintos-cvs} should
report that each group member is a member of the
@samp{@var{keeper}:pintos-cvs} group.

The keeper now creates the repository directory and gives the group
members access to it.  We will assume that the repository will be in a
directory called @file{cvs} in the keeper's home directory.  First
create this directory with @samp{mkdir $HOME/cvs}, then give group
members access to it with @samp{fs setacl -dir $HOME/cvs -acl
@var{keeper}:pintos-cvs write}.  Group members also need to be able to
look up the @file{cvs} directory in the keeper's home directory, which
can be enabled via @samp{fs setacl -dir $HOME -acl
@var{keeper}:pintos-cvs l} (that's letter ``ell,'' not digit
``one.'').@footnote{This command will allow group members to list the
files in your home directory, but not read or write them.  It should not
create a security risk unless the names of files in your home directory
are secret.}

Now initialize the repository.
To initialize the repository, execute @samp{cvs -d $HOME/cvs init}.

Finally, import the Pintos sources into the newly initialized
repository.  If you have an existing set of Pintos sources you want to
add to the repository, @samp{cd} to its @samp{pintos} directory now.
Otherwise, to import the base Pintos source tree, @samp{cd} to
@file{/usr/class/cs140/pintos/pintos} (note the doubled
@samp{pintos}).  After changing the current directory, execute this
command:
@example
cvs -d $HOME/cvs import -m "Imported sources" pintos foobar start
@end example

Here is a summary of the commands you have now executed:

@example
pts creategroup @var{keeper}:pintos-cvs
pts adduser -user @var{username} -group @var{keeper}:pintos-cvs
mkdir $HOME/cvs
fs setacl -dir $HOME/cvs -acl @var{keeper}:pintos-cvs write
fs setacl -dir $HOME -acl @var{keeper}:pintos-cvs l
cvs -d $HOME/cvs init
cd /usr/class/cs140/pintos/pintos
cvs -d $HOME/cvs import -m "Imported sources" pintos foobar start
@end example

The repository is now ready for use by any group member, as described
below.  Keep in mind that the repository should only be accessed
using CVS commands---it is not generally useful to examine them by
hand, and you should definitely not modify them yourself.

@node Using CVS
@subsection Using CVS

To use CVS, start by check out a working copy of the contents of the
CVS repository into a directory named @file{@var{dir}}.  To do so, execute
@samp{cvs -d ~@var{keeper}/cvs checkout -d @var{dir} pintos}, where
@var{keeper} is the CVS keeper's Leland username.

(If this fails due to some kind of permission problem, then run
@command{aklog} and try again.  If it still doesn't work, log out and
back in.  If that still doesn't fix the problem, the CVS repository may
not be initialized properly.)

At this point, you can modify any of the files in the working copy.
You can see the changes you've made with @samp{cvs diff -u}.  If you
want to commit these changes back to the repository, making them
visible to the other group members, you can use the CVS commit
command.  Within the @file{pintos} directory, execute @samp{cvs
commit}.  This will figure out the files that have been changed and
fire up a text editor for you to describe the changes.  By default,
this editor is @file{vi}, but you can select a different editor by
setting the @env{CVSEDITOR} environment variable, e.g.@: with
@samp{setenv CVSEDITOR emacs} (add this line to your @file{.cvsrc} to
make it permanent).

Suppose another group member has committed changes.  You can see the
changes committed to the repository since the time you checked it out
(or updated from it) with @samp{cvs diff -u -r BASE -r HEAD}.  You can
merge those change into your working copy using @samp{cvs update}.  If
any of your local changes conflict with the committed changes, the CVS
command output should tell you.  In that case, edit the files that
contain conflicts, looking for @samp{<<<} and @samp{>>>} that denote
the conflicts, and fix the problem.

You can view the history of @var{file} in your working directory,
including the log messages, with @samp{cvs log @var{file}}.

You can give a particular set of file versions a name called a
@dfn{tag}.  First @samp{cd} to the root of the working copy, then
execute @samp{cvs tag @var{name}}.  It's best to have no local changes
in the working copy when you do this, because the tag will not include
uncommitted changes.  To recover the tagged repository later, use the
@samp{checkout} command in the form @samp{cvs -d ~@var{keeper}/cvs
checkout -r @var{tag} -d @var{dir} pintos}, where @var{keeper} is the
username of the CVS keeper and @var{dir} is the directory to put the
tagged repository into.

If you add a new file to the source tree, you'll need to add it to the
repository with @samp{cvs add @var{file}}.  This command does not have
lasting effect until the file is committed later with @samp{cvs
commit}.

To remove a file from the source tree, first remove it from the file
system with @command{rm}, then tell CVS with @samp{cvs remove
@var{file}}.  Again, only @samp{cvs commit} will make the change
permanent.

To discard your local changes for a given file, without committing
them, use @samp{cvs update -C @var{file}}.

To check out a version of your repository as of a particular date, use
the command @samp{cvs -d ~@var{keeper}/cvs checkout -D '@var{date}' -d
@var{dir} pintos}, where @var{keeper} is the username of the CVS
keeper and @var{dir} is the directory to put the tagged repository
into..  A typical format for @var{date} is @samp{YYYY-MM-DD HH:MM},
but CVS accepts several formats, even something like @samp{1 hour
ago}.

For more information, visit the @uref{https://www.cvshome.org/, , CVS
home page}.

@node CVS Locking
@subsection CVS Locking

You might occasionally see a message like this while using CVS:

@example
waiting for blp's lock in /afs/ir/users/b/l/blp/cvs
@end example

This normally means that more than one user is accessing the repository
at the same time.  CVS should automatically retry after 30 seconds, at
which time the operation should normally be able to continue.

If you encounter a long wait for a lock, of more than a minute or so, it
may indicate that a CVS command did not complete properly and failed to
remove its locks.  If you think that this is the case, ask the user in
question about it.  If it appears that an operation did go awry, then
you (or the named user) can delete files whose names start with
@file{#cvs.rfl}, @file{#cvs.wfl}, or @file{#cvs.lock} in the directory
mentioned in the message.  Doing so should allow your operation to
proceed.  Do not delete or modify other files.
